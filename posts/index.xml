<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on HXB</title>
    <link>https://hanxiangbo.github.io/posts/</link>
    <description>Recent content in Posts on HXB</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 29 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://hanxiangbo.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>centos7 Mysql安装</title>
      <link>https://hanxiangbo.github.io/2020/mysql%E5%AE%89%E8%A3%85/</link>
      <pubDate>Tue, 29 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/mysql%E5%AE%89%E8%A3%85/</guid>
      <description>系统环境：centos-release-7-3.1611.el7.centos.x86_64 1. 准备工作 1.1清理原有的mysql数据库 rpm -pa | grep mysql 显示结果如下：
mysql80-community-release-el7-1.noarch mysql-community-server-8.0.11-1.el7.x86_64 mysql-community-common-8.0.11-1.el7.x86_64 mysql-community-libs-8.0.11-1.el7.x86_64 mysql-community-client-8.0.11-1.el7.x86_64 使用以下命令依次删除上面的程序 yum remove mysql-xxx-xxx- 删除mysql的配置文件，卸载不会自动删除配置文件，首先使用如下命令查找出所用的配置文件；
find / -name mysql 显示结果如下:
/etc/logrotate.d/mysql /etc/selinux/targeted/active/modules/100/mysql /etc/selinux/targeted/tmp/modules/100/mysql /var/lib/mysql /var/lib/mysql/mysql /usr/bin/mysql /usr/lib64/mysql /usr/local/mysql 删除：
rm -rf /var/lib/mysql 1.2 删除MariaDB的文件 rpm -pa | grep mariadb 可能的显示结果如下：
mariadb-libs-5.5.56-2.el7.x86_64 rpm -e mariadb-libs-5.5.56-2.el7.x86_64 #删除上面的程序 2. 安装MYSQL 下载mysql
cd /usr/local mkdir mysql cd mysql wget https://repo.mysql.com//mysql80-community-release-el7-3.noarch.rpm 下载完成后采用yum 安装仓库
yum install mysql80-community-release-el7-3.noarch.rpm 禁用mysql5.7的仓库，启用mysql8.0 的仓库
yum install yum-utils -y yum-config-manager --disable mysql57-community yum-config-manager --enable mysql80-community 或者可以编辑 mysql repo文件</description>
    </item>
    
    <item>
      <title>CentOS7安装fail2ban防御 SSH 服务器的暴力破解攻击</title>
      <link>https://hanxiangbo.github.io/2020/centos7%E5%AE%89%E8%A3%85fail2ban%E9%98%B2%E5%BE%A1-ssh-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%94%BB%E5%87%BB/</link>
      <pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/centos7%E5%AE%89%E8%A3%85fail2ban%E9%98%B2%E5%BE%A1-ssh-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%94%BB%E5%87%BB/</guid>
      <description>环境：centos-release-7-3.1611.el7.centos.x86_64 一. 安装 1.安装epel源 yum -y install epel-release 2.检查是否添加到源列表 yum repolist 3.安装fail2ban yum -y install fail2ban 二.配置Fail2ban 1.安装成功之后，fail2ban的配置文件位于/etc/fail2ban，其中的jail.conf为主要配置文件，有关的匹配规则位于filter.d目录下。fail2ban的目录结构说明如下： /etc/fail2ban ## fail2ban 服务配置目录 /etc/fail2ban/action.d ## iptables 、mail 等动作文件目录 /etc/fail2ban/filter.d ## 条件匹配文件目录，过滤日志关键内容 /etc/fail2ban/jail.d ## 规则文件目录，按具体防护项目分成文件 /etc/fail2ban/jail.local ## 默认规则文件(自己新建的) /etc/fail2ban/jail.conf ## fail2ban 防护配置文件 /etc/fail2ban/fail2ban.conf ## fail2ban 配置文件，定义日志级别、日志、sock 文件位置等 2.新建/etc/fail2ban/jail.local来设置默认配置 [DEFAULT] # time is in seconds. 3600 = 1 hour, 86400 = 24 hours (1 day) # 以空格分隔的列表，可以是 IP 地址、CIDR 前缀或者 DNS 主机名 # 用于指定哪些地址可以忽略 fail2ban 防御 ignoreip = 127.</description>
    </item>
    
    <item>
      <title>Chrome DevTools中的这些骚操作，你都知道吗？</title>
      <link>https://hanxiangbo.github.io/2020/chrome-devtools%E4%B8%AD%E7%9A%84%E8%BF%99%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C%E4%BD%A0%E9%83%BD%E7%9F%A5%E9%81%93%E5%90%97/</link>
      <pubDate>Wed, 28 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/chrome-devtools%E4%B8%AD%E7%9A%84%E8%BF%99%E4%BA%9B%E9%AA%9A%E6%93%8D%E4%BD%9C%E4%BD%A0%E9%83%BD%E7%9F%A5%E9%81%93%E5%90%97/</guid>
      <description>原文地址
命令（Command） 菜单 🏈 “命令”菜单是最最常用的，本文也会多次用到，所以这里先说一下打开方式: 按Cmd + Shift + P（如果使用Windows，则按Ctrl + Shift + P）打开“命令”菜单。
截图DOM元素 🏉 当你只想对一个特别的 DOM 节点进行截图时，你可能需要使用其他工具弄半天，但现在你直接选中那个节点，打开 命令（Command） 菜单并且使用 节点截图 就可以了。
截取特定DOM元素示例：
截取特定节点对应上图命令是Screenshot Capture node screenshot。
不只是这样，你同样可以用这种方式 实现全屏截图 ：通过 Screenshot Capture full size screenshot 命令。
 请注意，这里说的是全屏，并不只是页面可视区域，而是包含滚动条在内的所有页面内容。
 在控制台中使用上次操作的值 🎃 我是最近才发现这个技巧。使用$_可以引用在控制台执行的前一步操作的返回值。如果您正在控制台调试一些JavaScript代码，并且需要引用先前的返回值，那么这可能非常方便。
重新发起xhr请求 🚀 在平时和后端联调时，我们用的最多的可能就是Network面板了。但是每次想重新查看一个请求，我们往往都是通过刷新页面、点击按钮等方式去触发xhr请求，这种方式有时显得会比较麻烦，我们可以通过google提供的Replay XHR的方式去发起一条新的请求，这样对于我们开发效率的提升是有所帮助的。
编辑页面上的任何文本 ✍ 在控制台输入document.body.contentEditable=&amp;ldquo;true&amp;quot;或者document.designMode = &amp;lsquo;on&amp;rsquo;就可以实现对网页的编辑了。
其实这个还是比较实用的，比如你要测试一个DOM节点文字太长时，样式是否会混乱，或者要去直接修改页面元素去满足一些业务需求时。（我之前是在Elements面板一个一个去修改的，，，）
网络面板（Network）的幻灯片模式 🌇 启动Network 面板下的Capture screenshots就可以在页面加载时捕捉屏幕截图。有点幻灯片的感觉。
单击每一帧截图，显示的就是对应时刻发生的网络请求。这种可视化的展现形式会让你更加清楚每一时刻发生的网络请求情况。
动画检查 🎏 DevTools 中有一个动画面板，默认情况下它是关闭的，很多人可能不太清楚这个功能。它可以让你控制和操纵 CSS 动画，并且可视化这些动画是如何工作的。 要打开该面板，可以在 DevTools 右上角菜单 → More tools 中打开 Animations ：</description>
    </item>
    
    <item>
      <title>Linux常用命令</title>
      <link>https://hanxiangbo.github.io/2020/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 22 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>1.Linux查看当前操作系统版本信息 cat /proc/version 2.检查源列表 yum repolist 运行的端口 netstat -nupl (UDP类型的端口) netstat -ntpl (TCP类型的端口) 你可以使用 lsof 命令来查看某一端口是否开放。查看端口可以这样来使用，我就以80端口为例：
lsof -i:80 注意：
服务有没有启动，如果有显示说明已经开放了，如果没有显示说明没有开放。
查看firewall服务状态 systemctl status firewalld 查看firewall的状态 firewall-cmd --state 开启 service firewalld start 重启 service firewalld restart 关闭 service firewalld stop 查询端口是否开放 firewall-cmd --query-port=1017/tcp 开放80端口 firewall-cmd --permanent --add-port=42284/tcp 移除端口 firewall-cmd --permanent --remove-port=8888/tcp 重启防火墙(修改配置后要重启防火墙) firewall-cmd --reload 参数解释 1、firwall-cmd：是Linux提供的操作firewall的一个工具；
2、&amp;ndash;permanent：表示设置为持久；
3、&amp;ndash;add-port：标识添加的端口；</description>
    </item>
    
    <item>
      <title>Mongo 文件迁移</title>
      <link>https://hanxiangbo.github.io/2020/mongo-%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB/</link>
      <pubDate>Sat, 10 Oct 2020 16:54:02 +0800</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/mongo-%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB/</guid>
      <description>@RequestMapping(value = &amp;#34;/moveFile&amp;#34;) public ModelMap moveFile(String fileId, String startTime, String endTime) { Long startTimes = System.currentTimeMillis(); //目的源  MongoCredential credentialTo = MongoCredential.createCredential(&amp;#34;ceshi&amp;#34;, &amp;#34;ceshi&amp;#34;, &amp;#34;123456&amp;#34;.toCharArray()); MongoClient mongoClientTo = new MongoClient(new ServerAddress(&amp;#34;192.168.1.15&amp;#34;, 27017), Arrays.asList(credentialTo)); MongoDatabase mongoDatabaseTo = mongoClientTo.getDatabase(&amp;#34;ceshi&amp;#34;); //复制源  MongoCredential credential = MongoCredential.createCredential(&amp;#34;root&amp;#34;, &amp;#34;travel_file&amp;#34;, &amp;#34;123456&amp;#34;.toCharArray()); MongoClient mongoClient = new MongoClient(new ServerAddress(&amp;#34;127.0.0.1&amp;#34;, 27017), Arrays.asList(credential)); MongoDatabase mongoDatabaseFrom = mongoClient.getDatabase(&amp;#34;travel_file&amp;#34;); log.info(&amp;#34;Mongo Connect to database successfully&amp;#34;); int successfulFiles = 0; int successfulChunks = 0; int existNum = 0; //数据库集合  String[] collections = {&amp;#34;fs.</description>
    </item>
    
    <item>
      <title> Mysql</title>
      <link>https://hanxiangbo.github.io/2020/mysql/</link>
      <pubDate>Fri, 12 Jun 2020 09:47:58 +0800</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/mysql/</guid>
      <description>1 定位慢 SQL 1.1 通过慢查询日志 如果需要定位到慢查询，一般的方法是通过慢查询日志来查询的，MySQL 的慢查询日志用来记录在 MySQL 中响应时间超过参数 long_query_time（单位秒，默认值 10）设置的值并且扫描记录数不小于 min_examined_row_limit（默认值0）的语句，能够帮我们找到执行完的慢查询，方便我们对这些 SQL 进行优化。 默认情况下，慢查询日志中不会记录管理语句，可通过设置 log_slow_admin_statements = on 让管理语句中的慢查询也会记录到慢查询日志中。 默认情况下，也不会记录查询时间不超过 long_query_time 但是不使用索引的语句，可通过配置log_queries_not_using_indexes = on 让不使用索引的 SQL 都被记录到慢查询日志中（即使查询时间没超过 long_query_time 配置的值）。</description>
    </item>
    
    <item>
      <title> Mysql事务</title>
      <link>https://hanxiangbo.github.io/2020/mysql%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 12 Jun 2020 09:47:58 +0800</pubDate>
      
      <guid>https://hanxiangbo.github.io/2020/mysql%E4%BA%8B%E5%8A%A1/</guid>
      <description>1. 事务基本要素  数据库的事务是指一组sql语句组成的数据库逻辑处理单元，在这组的sql操作中，要么全部执行成功，要么全部执行失败 事务具有4个特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持续性（Durability）  A (Atomicity) 原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样 C (Consistency) 一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏 I (Isolation)隔离性：一个事务的执行不能其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰 D (Durability) 持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚   原子性：使用 undo log,从而达到回滚 持久性：使用 redo log,从而达到故障后恢复 隔离性：使用锁以及MVCC,运用的优化思想有读写分离,读读并行,读写并行 一致性：通过回滚以及恢复和在并发环境下的隔离做到一致性。  2. 事务隔离级别 MySQL 的 InnoDB 引擎才支持事务，其中可重复读是默认的隔离级别。
2.1 读未提交（READ UNCOMMITTED）  读未提交会读到另一个事务的未提交的数据，产生脏读问题  2.2 读提交 （READ COMMITTED）  读提交解决了脏读的，出现了不可重复读，即在一个事务任意时刻读到的数据可能不一样，可能会受到其它事务对数据修改提交后的影响，一般是对于update的操作。  2.3 可重复读 （REPEATABLE READ）  可重复是对比不可重复而言的，上面说不可重复读是指同一事物不同时刻读到的数据值可能不一致。而可重复读是指，事务不会读到其他事务对已有数据的修改，及时其他事务已提交，也就是说，事务开始时读到的已有数据是什么，在事务提交前的任意时刻，这些数据的值都是一样的。但是，对于其他事务新插入的数据是可以读到的，这也就引发了幻读问题。  2.4 串行化 （SERIALIZABLE）  串行化是4种事务隔离级别中隔离效果最好的，解决了脏读、可重复读、幻读的问题，但是效果最差，它将事务的执行变为顺序执行，与其他三个隔离级别相比，它就相当于单线程，后一个事务的执行必须等待前一个事务结束     隔离级别 脏读 不可重复读 幻读     未提交读(Read uncommited) 可能 可能 可能   已提交读(Read commited) 不可能 可能 可能   可重复读(Repeatable read) 不可能 不可能 可能   串行化(Serializable) 不可能 不可能 不可能    脏读</description>
    </item>
    
  </channel>
</rss>
